server:
  port: 90

spring:
  application:
    name: notification-service
  cloud:
    openfeign:
      observations:
        enabled: true
  data:
    redis:
      host: redis
      port: 6379
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${DB_HOST}:${DB_PORT}/${DB_NAME}
    username: ${DB_USER}
    password: ${DB_PASSWORD}
  sql:
    init:
      mode: never
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    consumer:
      group-id: notification-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest

mybatis:
  mapper-locations: classpath*:mapper/**/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  type-aliases-package: com.example.notificationservice.model

logging:
  level:
    com.example.notificationservice: DEBUG
    org.mybatis: INFO
    org.apache.ibatis: INFO
    com.p6spy: INFO

p6spy:
  logging: sysout
  multiline: true
  sql-format: true


management:
  endpoints:
    web:
      exposure:
        include: refresh, health, beans, info, prometheus
  endpoint:
    prometheus:
      access: read_only
  tracing:
    enabled: true
    sampling:
      probability: 1.0
    propagation:
      type: w3c
  otlp:
    tracing:
      endpoint: ${OTLP_TRACING_ENDPOINT}  # 추적 데이터 보낼 곳 (Tempo or Jaeger)
    sampling:
      probability: 1.0


file:
  service:
    base-url: ${FILE_SERVICE_BASE_URL}

user:
  service:
    base-url: ${USER_SERVICE_BASE_URL}

# OpenFeign global timeout settings (milliseconds)
feign:
  client:
    config:
      default:
        connectTimeout: 10000   # 10s
        readTimeout: 120000     # 120s for large uploads/downloads
        loggerLevel: BASIC

